@model ProjectManagementSystem.ViewModels.BaseFilter
@using System.Reflection;
@using ProjectManagementSystem.Filters;
@{
    var filter = new Dictionary<PropertyInfo, FilterByAttribute>();
    foreach (PropertyInfo pi in Model.GetType().GetProperties())
    {
        FilterByAttribute attrib = (FilterByAttribute)pi.GetCustomAttribute(typeof(FilterByAttribute));
        attrib = attrib ?? (FilterByAttribute)pi.GetCustomAttribute(typeof(FilterDropDownAttribute));

        if (attrib != null)
        {
            filter.Add(pi, attrib);
        }
    }
}

<form action="/@(ViewContext.RouteData.Values["controller"].ToString())/@(ViewContext.RouteData.Values["action"].ToString())" method="post">
    @foreach (string key in this.Request.QueryString.Keys)
    {
        if (!key.ToString().Contains(Model.Prefix) && key.ToString() != Model.Pager.Prefix + "CurrentPage")
        {
    <input type="hidden" id="@((Model.Prefix + key).Replace(".", "__"))" name="@key" value="@this.Request[key].ToString()" />
    }
    }
    @foreach (var kvp in this.ViewContext.RouteData.Values)
    {
        if (kvp.Key == "controller" || kvp.Key == "action" || kvp.Key.ToString() == Model.Pager.Prefix + "CurrentPage")
        {
            continue;
        }

        <input type="hidden" id="@((Model.Prefix + kvp.Key).Replace(".", "__"))" name="@kvp.Key" value="@kvp.Value.ToString()" />
    }
    @foreach (var key in this.Request.Form.Keys)
    {
        if (filter.Count(f => Model.Prefix + f.Key.Name == key.ToString()) <= 0 && key.ToString() != Model.Pager.Prefix + "CurrentPage" && !key.ToString().Contains(Model.Prefix))
        {

            <input type="hidden" id="@((Model.Prefix + key).Replace(".", "__"))" name="@key.ToString()" value="@this.Request.Form[key.ToString()].ToString()" />
        }
    }
    @foreach (KeyValuePair<PropertyInfo, FilterByAttribute> kvp in filter)
    {
        if (kvp.Value is FilterDropDownAttribute)
        {
            var dropDownAttrib = (FilterDropDownAttribute)kvp.Value;
            var pi = Model.GetType().GetProperty(dropDownAttrib.TargetProperty);
            string targetPropertyValue = Convert.ToString(pi.GetValue(Model, null));

            <label for="@(Model.Prefix.Replace(".", "__"))@dropDownAttrib.TargetProperty">@dropDownAttrib.DisplayName:</label>
            <select class="form-control" id="@(Model.Prefix.Replace(".", "__"))@dropDownAttrib.TargetProperty" name="@Model.Prefix@dropDownAttrib.TargetProperty">
                <option value="" selected>Choose value</option>
                @foreach (var item in (List<SelectListItem>)kvp.Key.GetValue(Model, null))
                {
                    <option class="dropdown" value="@item.Value" @(item.Value == targetPropertyValue ? "selected" : "")>@item.Text</option>
                }
            </select>
        }
        else if (kvp.Value is FilterByAttribute)
        {
            <label for="@(Model.Prefix.Replace(".", "__"))@kvp.Key.Name">@kvp.Value.DisplayName</label>
            <input class="form-control" id="@(Model.Prefix.Replace(".", "__"))@kvp.Key.Name" type="text" name="@(Model.Prefix)@kvp.Key.Name" value="@kvp.Key.GetValue(Model, null)" />
        }
    }
    <br />
    <input class="btn btn-default" type="submit" value="Filter" />
</form>
<br />
